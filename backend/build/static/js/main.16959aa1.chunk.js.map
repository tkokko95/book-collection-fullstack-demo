{"version":3,"sources":["services/books.js","components/BookList.js","components/FormFields.js","components/BookForm.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","getAll","a","axios","get","response","data","create","post","update","id","put","remove","delete","booksService","BookList","books","setSelectedBook","selectedBook","sortedBooks","sort","b","author","localeCompare","type","className","map","book","onClick","title","FormFields","formData","handleChange","value","name","onChange","maxLength","rows","columns","description","BookForm","fetchBooks","setNotification","blankData","useState","setFormData","editMode","useEffect","formDataIsValid","handleSubmitNew","info","error","errorName","handleSubmitEdit","errorMessage","handleDeleteButton","bookToDelete","event","target","disabled","Notification","message","App","setBooks","notification","fetchedBooks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16959aa1.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/books'\n\nconst getAll = async () => {\n    const response = await axios.get(baseUrl)\n    return response.data\n}\n\nconst create = async (data) => {\n    const response = await axios.post(baseUrl, data)\n    return response.data\n}\n\nconst update = async (data, id) => {\n    const response = await axios.put(`${baseUrl}/${id}`, data)\n    return response.data\n}\n\nconst remove = async (id) => {\n    const response = await axios.delete(`${baseUrl}/${id}`)\n    return response.data\n}\n\nconst booksService = { getAll, create, update, remove }\nexport default booksService","import React from 'react'\nconst BookList = ({ books, setSelectedBook, selectedBook }) => {\n    const sortedBooks = books.sort((a, b) => a.author.localeCompare(b.author))\n\n    return(\n        <ul type='none' className='bookList'>\n            {sortedBooks.map((book) => {\n                return(\n                    <li\n                        key={book.id}\n                        className={selectedBook?.id === book.id ? 'selectedBook' : 'book'}\n                        onClick={() => setSelectedBook(book)}\n                    >\n                        {book.author} - <strong>{book.title}</strong>\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\n\nexport default BookList","import React from 'react'\n\nconst FormFields = ({ formData, handleChange }) => {\n    return(\n        <div className='formFields'>\n            <label>\n                Title *\n                <br/>\n                <input\n                    type='text'\n                    value={formData.title}\n                    name='title'\n                    id='titleInput'\n                    onChange={handleChange}\n                    maxLength='50'\n                />\n            </label>\n            <br />\n            <label>\n                Author *\n                <br/>\n                <input\n                    type='text'\n                    value={formData.author}\n                    name='author'\n                    id='authorInput'\n                    onChange={handleChange}\n                    maxLength='50'\n                />\n            </label>\n            <br />\n            <label>\n                Description\n                <br/>\n                <textarea\n                    type='text'\n                    rows='10'\n                    columns='10'\n                    value={formData.description}\n                    name='description'\n                    id='descriptionInput'\n                    maxLength='150'\n                    onChange={handleChange}\n                />\n            </label>\n            <br />\n        </div>\n    )\n}\n\n\nexport default FormFields","import React, { useState, useEffect } from 'react'\nimport booksService from '../services/books'\nimport FormFields from './FormFields'\n\nconst BookForm = ({ selectedBook, setSelectedBook, fetchBooks, setNotification }) => {\n    const blankData = {\n        title: '',\n        author: '',\n        description:''\n    }\n    const [formData, setFormData] = useState(blankData)\n    const editMode = selectedBook.title ? true : false\n\n    useEffect(() => {\n        setFormData(selectedBook)\n    }, [selectedBook])\n\n    const formDataIsValid = formData.title && formData.author\n\n    const handleChange = (event) => {\n        setFormData({\n            ...formData,\n            [event.target.name]: event.target.value\n        })\n    }\n\n    const handleSubmitNew = async () => {\n        try {\n            const response = await booksService.create(formData)\n            await fetchBooks()\n            setFormData(blankData)\n            setNotification({\n                info: `Book succesfully added: ${response.title}`\n            })\n        } catch(error) {\n            setNotification({\n                error: `${error.response.data.errorName}: Make sure that the title doesn't already exist`\n            })\n        } finally {\n            await fetchBooks()\n        }\n    }\n\n    const handleSubmitEdit = async () => {\n        try {\n            const response = await booksService.update(formData, selectedBook.id)\n            setFormData(blankData)\n            setSelectedBook(blankData)\n            setNotification({\n                info: `Book successfully modified: ${response.title}`\n            })\n        } catch(error) {\n            setNotification({\n                error: `${error.response.data.errorMessage}: This item might have been deleted`\n            })\n        } finally {\n            await fetchBooks()\n        }\n    }\n\n    const handleDeleteButton = async () => {\n        try {\n            const bookToDelete = selectedBook.title\n            await booksService.remove(selectedBook.id)\n            setFormData(blankData)\n            setSelectedBook(blankData)\n            setNotification({\n                info: `Book successfully deleted: ${bookToDelete}`\n            })\n        } catch(error) {\n            setNotification({\n                error: `${error.response.data.errorMessage}: This item might have already been deleted`\n            })\n        } finally {\n            await fetchBooks()\n        }\n    }\n\n    const handleCancelButton = () => {\n        setSelectedBook(blankData)\n    }\n\n\n    return(\n        <div className='bookForm'>\n            <FormFields\n                formData={formData}\n                handleChange={handleChange}\n            />\n            <button\n                disabled={editMode || !formDataIsValid}\n                onClick={handleSubmitNew}\n                id='saveNewButton'\n            >\n                Save New\n            </button>\n            <button\n                disabled={!editMode || !formDataIsValid}\n                onClick={handleSubmitEdit}\n                id='saveEditedButton'\n            >\n                Save Changes\n            </button>\n            <button\n                disabled={!editMode}\n                onClick={handleDeleteButton}\n                id='deleteButton'\n            >\n                Delete\n            </button>\n            <button\n                disabled={!editMode}\n                onClick={handleCancelButton}\n                id='cancelButton'\n            >\n                Cancel\n            </button>\n        </div>\n    )\n}\n\nexport default BookForm","import React from 'react'\n\nconst Notification = ({ message, className }) => {\n    if(!message) {\n        return null\n    }\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\n\nimport booksService from './services/books'\nimport BookList from './components/BookList'\nimport BookForm from './components/BookForm'\nimport Notification from './components/Notification'\n\nconst App = () => {\n    const [books, setBooks] = useState([])\n    const [selectedBook, setSelectedBook] = useState({\n        title: '',\n        author: '',\n        description: ''\n    })\n    const [notification, setNotification] = useState(null)\n\n    useEffect(() => {\n        fetchBooks()\n    }, [])\n\n    const fetchBooks = async () => {\n        try {\n            const fetchedBooks = await booksService.getAll()\n            setBooks(fetchedBooks)\n        } catch (error) {\n            setNotification({\n                error: 'Failed to fetch data from the server'\n            })\n        }\n    }\n\n    return (\n        <div className='mainContainer'>\n            <Notification\n                message={notification?.info || notification?.error}\n                className={`\n                    ${notification?.error ? 'error' : 'info'}\n                    notification\n                `}\n            />\n            <br />\n            <BookForm\n                selectedBook={selectedBook}\n                setSelectedBook={setSelectedBook}\n                fetchBooks={fetchBooks}\n                setNotification={setNotification}\n            />\n            <BookList\n                books={books}\n                selectedBook={selectedBook}\n                setSelectedBook={setSelectedBook}\n            />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}